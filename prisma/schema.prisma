generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  name           String?
  email          String?        @unique
  emailVerified  DateTime?

  imageId         String?
  imageUrl        String?

  hashedPassword String?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastLoginAt DateTime @default(now())

  createdClients Client[]       @relation("CreatedClients")
  clientAccesses Access[]

  accounts       Account[]
  sessions       Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String? 
  expires_at        Int?    
  token_type        String? 
  scope             String? 
  id_token          String? 
  session_state     String? 

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model Client {
  id         String   @id @default(cuid())
  name       String
  imageId   String?

  creatorId  String
  creator    User           @relation("CreatedClients", fields: [creatorId], references: [id])

  accesses   Access[]
  processes  Process[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Access {
  id          String       @id @default(cuid())
  userId      String
  clientId    String
  state       AccessState
  joinedAt    DateTime?

  permissions Permission[]

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  client      Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([userId, clientId])
}

model Permission {
  id        String   @id @default(cuid())
  accessId  String
  scope     Scope
  action    Action
  allowed   Boolean

  access    Access   @relation(fields: [accessId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([accessId, scope, action])
}

model Process {
  id         String    @id @default(cuid())
  title       String
  content     String?
  date        DateTime @default(now())

  name       String
  type       ProcessType 
  
  clientId   String
  parentId   String?
  creatorId  String

  client     Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  parent     Process?  @relation("ProcessToChildren", fields: [parentId], references: [id])
  childrens  Process[] @relation("ProcessToChildren")

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

enum AccessState {
  pending
  accepted
  rejected
}

enum Scope {
  users
  processes
  documents
}

enum Action {
  invite
  remove
  edit
  delete
  create
  grant
}

enum ProcessType {
  file
  folder
}